import telebot
import json
import os
import time
from telebot.types import (InlineKeyboardMarkup, InlineKeyboardButton, 
                          ReplyKeyboardMarkup, KeyboardButton)

# ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
BOT_TOKEN = "8281639128:AAEwpmH5OPPHA-5RtD3mG6208Sw2VMSQCWI"  # –ó–ê–ú–ï–ù–ò–¢–ï –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
CHANNEL_USERNAME = "@animevid_online"

# ========== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==========
def load_anime_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–Ω–∏–º–µ"""
    try:
        with open('anime_data.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
        return {
            "attack_on_titan": {
                "title": "–ê—Ç–∞–∫–∞ –¢–∏—Ç–∞–Ω–æ–≤",
                "description": "–ò—Å—Ç–æ—Ä–∏—è –æ –≤—ã–∂–∏–≤–∞–Ω–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Ç–∏–≤ —Ç–∏—Ç–∞–Ω–æ–≤",
                "poster": "https://–≤–∞—à-—Å–∞–π—Ç.ru/video/posters/attack_on_titan.jpg",
                "episodes": {
                    "1": {
                        "title": "–¢–æ–º—É –¥–µ–Ω—å, –∫–æ–≥–¥–∞ —è —Ç–µ–±–µ –∫—Ä–∏–∫–Ω—É–ª: –°–º–∏—Ä–∏—Å—å",
                        "dubs": {
                            "anilibria": {
                                "quality": {
                                    "720p": "https://–≤–∞—à-—Å–∞–π—Ç.ru/video/anilibria/attack_on_titan/720p/1.mp4",
                                    "1080p": "https://–≤–∞—à-—Å–∞–π—Ç.ru/video/anilibria/attack_on_titan/1080p/1.mp4"
                                }
                            },
                            "animevost": {
                                "quality": {
                                    "720p": "https://–≤–∞—à-—Å–∞–π—Ç.ru/video/animevost/attack_on_titan/720p/1.mp4"
                                }
                            }
                        }
                    },
                    "2": {
                        "title": "–í —Ç–æ—Ç –¥–µ–Ω—å",
                        "dubs": {
                            "anilibria": {
                                "quality": {
                                    "720p": "https://–≤–∞—à-—Å–∞–π—Ç.ru/video/anilibria/attack_on_titan/720p/2.mp4"
                                }
                            }
                        }
                    }
                }
            },
            "demon_slayer": {
                "title": "–ò—Å—Ç—Ä–µ–±–∏—Ç–µ–ª—å –¥–µ–º–æ–Ω–æ–≤",
                "description": "–¢–∞–Ω–¥–∑–∏—Ä–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∏—Å—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–º –¥–µ–º–æ–Ω–æ–≤ —á—Ç–æ–±—ã —Å–ø–∞—Å—Ç–∏ —Å–µ—Å—Ç—Ä—É",
                "poster": "https://–≤–∞—à-—Å–∞–π—Ç.ru/video/posters/demon_slayer.jpg",
                "episodes": {
                    "1": {
                        "title": "–ñ–µ—Å—Ç–æ–∫–æ—Å—Ç—å",
                        "dubs": {
                            "anilibria": {
                                "quality": {
                                    "720p": "https://–≤–∞—à-—Å–∞–π—Ç.ru/video/anilibria/demon_slayer/720p/1.mp4"
                                }
                            }
                        }
                    }
                }
            }
        }

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
anime_data = load_anime_data()

# ========== –£–¢–ò–õ–ò–¢–´ ==========
def get_dub_display_name(dub_name):
    """–ö—Ä–∞—Å–∏–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–∑–≤—É—á–µ–∫"""
    dub_names = {
        "anilibria": "AniLibria",
        "animevost": "AnimeVost", 
        "shiza": "Shiza Project",
        "cuba77": "Cuba77",
        "animedia": "AniMedia"
    }
    return dub_names.get(dub_name, dub_name)

# ========== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========
def main_menu_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üîç –ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ"))
    markup.add(KeyboardButton("üìä –ü–æ–ø—É–ª—è—Ä–Ω–æ–µ"), KeyboardButton("üé¨ –ù–æ–≤–∏–Ω–∫–∏"))
    return markup

def anime_actions_keyboard(anime_id):
    """–ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–Ω–∏–º–µ"""
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üì∫ –í—ã–±—Ä–∞—Ç—å —Å–µ—Ä–∏—é", callback_data=f"select_episode:{anime_id}"))
    markup.add(InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data=f"info:{anime_id}"))
    return markup

def episodes_keyboard(anime_id, episodes):
    """–ö–Ω–æ–ø–∫–∏ —Å–µ—Ä–∏–π"""
    markup = InlineKeyboardMarkup()
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É
    sorted_episodes = sorted(episodes.items(), key=lambda x: int(x[0]))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —Å–µ—Ä–∏–π
    for ep_num, ep_data in sorted_episodes[-12:]:
        markup.add(InlineKeyboardButton(f"–°–µ—Ä–∏—è {ep_num}", 
                                      callback_data=f"episode:{anime_id}:{ep_num}"))
    
    markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_anime:{anime_id}"))
    return markup

def dubs_keyboard(anime_id, episode_number, dubs):
    """–ö–Ω–æ–ø–∫–∏ –æ–∑–≤—É—á–µ–∫"""
    markup = InlineKeyboardMarkup()
    
    for dub_name in dubs.keys():
        display_name = get_dub_display_name(dub_name)
        markup.add(InlineKeyboardButton(f"üéôÔ∏è {display_name}", 
                                      callback_data=f"dub:{anime_id}:{episode_number}:{dub_name}"))
    
    markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", 
                                  callback_data=f"episode:{anime_id}:{episode_number}"))
    return markup

def quality_keyboard(anime_id, episode_number, dub_name, qualities):
    """–ö–Ω–æ–ø–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞"""
    markup = InlineKeyboardMarkup()
    
    for quality in qualities.keys():
        markup.add(InlineKeyboardButton(f"üìπ {quality}", 
                                      callback_data=f"quality:{anime_id}:{episode_number}:{dub_name}:{quality}"))
    
    markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", 
                                  callback_data=f"dub:{anime_id}:{episode_number}:{dub_name}"))
    return markup

# ========== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ==========
bot = telebot.TeleBot(BOT_TOKEN)

# ========== –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò (–û–¢–ö–õ–Æ–ß–ï–ù–ê) ==========
def check_subscription(user_id):
    """–í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–ê –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò"""
    return True

# ========== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
def show_anime_info(chat_id, anime_id, anime=None):
    """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–Ω–∏–º–µ —Å –ø–æ—Å—Ç–µ—Ä–æ–º"""
    if not anime:
        anime = anime_data.get(anime_id)
    
    if not anime:
        bot.send_message(chat_id, "‚ùå –ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    title = anime.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    description = anime.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
    episodes_count = len(anime.get('episodes', {}))
    poster_url = anime.get('poster', '')
    
    text = f"üé¨ {title}\n\nüìñ {description}\n\nüì∫ –°–µ—Ä–∏–π: {episodes_count}"
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Å—Ç–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    if poster_url and not poster_url.startswith("https://example.com"):
        try:
            bot.send_photo(chat_id, poster_url, caption=text, 
                          reply_markup=anime_actions_keyboard(anime_id))
            return
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–µ—Ä–∞: {e}")
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            bot.send_message(chat_id, text, reply_markup=anime_actions_keyboard(anime_id))
    else:
        # –ï—Å–ª–∏ –ø–æ—Å—Ç–µ—Ä–∞ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
        bot.send_message(chat_id, text, reply_markup=anime_actions_keyboard(anime_id))

def show_main_menu(chat_id, first_name=None):
    """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    greeting = "üéå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –æ—Ç Anime Vid! –¢–æ–ª—å–∫–æ —É –Ω–∞—Å —Å–∞–º—ã–π –∫—Ä—É–ø–Ω—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∏–º–µ"
    if first_name:
        greeting = f"üéå –ü—Ä–∏–≤–µ—Ç, {first_name}!\n{greeting}"
    
    bot.send_message(chat_id, greeting, reply_markup=main_menu_keyboard())

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ==========
@bot.message_handler(commands=['start'])
def start(message):
    show_main_menu(message.chat.id, message.from_user.first_name)

@bot.message_handler(func=lambda message: message.text == "üîç –ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ")
def search_anime(message):
    msg = bot.send_message(message.chat.id, "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ:")
    bot.register_next_step_handler(msg, process_search)

def process_search(message):
    search_query = message.text.lower().strip()
    results = []
    
    # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ ID
    for anime_id, anime_data_item in anime_data.items():
        title = anime_data_item.get('title', '').lower()
        if search_query in title or search_query in anime_id:
            results.append((anime_id, anime_data_item))
    
    if results:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∞–Ω–∏–º–µ
        anime_id, anime = results[0]
        show_anime_info(message.chat.id, anime_id, anime)
    else:
        bot.send_message(message.chat.id, "‚ùå –ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        show_main_menu(message.chat.id)

@bot.message_handler(func=lambda message: message.text == "üìä –ü–æ–ø—É–ª—è—Ä–Ω–æ–µ")
def popular_anime(message):
    """–ü–æ–∫–∞–∑ –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –∞–Ω–∏–º–µ —Å –ø–æ—Å—Ç–µ—Ä–∞–º–∏"""
    popular_list = list(anime_data.items())[:5]
    
    if not popular_list:
        bot.send_message(message.chat.id, "üìä –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –∞–Ω–∏–º–µ –ø—É—Å—Ç.")
        return
    
    for anime_id, anime in popular_list:
        title = anime.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        poster_url = anime.get('poster', '')
        
        if poster_url and not poster_url.startswith("https://example.com"):
            try:
                bot.send_photo(message.chat.id, poster_url, 
                              caption=f"üé¨ {title}\n\nüî• –ü–æ–ø—É–ª—è—Ä–Ω–æ–µ –∞–Ω–∏–º–µ",
                              reply_markup=anime_actions_keyboard(anime_id))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–µ—Ä–∞: {e}")
                bot.send_message(message.chat.id, f"üé¨ {title}",
                              reply_markup=anime_actions_keyboard(anime_id))
        else:
            bot.send_message(message.chat.id, f"üé¨ {title}",
                          reply_markup=anime_actions_keyboard(anime_id))

@bot.message_handler(func=lambda message: message.text == "üé¨ –ù–æ–≤–∏–Ω–∫–∏")
def new_anime(message):
    """–ü–æ–∫–∞–∑ –Ω–æ–≤—ã—Ö –∞–Ω–∏–º–µ"""
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ –∂–µ —á—Ç–æ –∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ
    popular_anime(message)

# ========== CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========
@bot.callback_query_handler(func=lambda call: call.data.startswith('select_episode:'))
def select_episode_callback(call):
    anime_id = call.data.split(':')[1]
    anime = anime_data.get(anime_id)
    
    if not anime:
        bot.answer_callback_query(call.id, "‚ùå –ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    episodes = anime.get('episodes', {})
    
    if not episodes:
        bot.answer_callback_query(call.id, "‚ùå –°–µ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    bot.edit_message_text(f"üé¨ {anime['title']}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é:",
                         call.message.chat.id,
                         call.message.message_id,
                         reply_markup=episodes_keyboard(anime_id, episodes))

@bot.callback_query_handler(func=lambda call: call.data.startswith('episode:'))
def select_dub_callback(call):
    _, anime_id, episode = call.data.split(':')
    anime = anime_data.get(anime_id)
    
    if not anime:
        bot.answer_callback_query(call.id, "‚ùå –ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    episode_data = anime.get('episodes', {}).get(episode)
    if not episode_data:
        bot.answer_callback_query(call.id, "‚ùå –°–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    dubs = episode_data.get('dubs', {})
    
    if not dubs:
        bot.answer_callback_query(call.id, "‚ùå –û–∑–≤—É—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    episode_title = episode_data.get('title', f'–°–µ—Ä–∏—è {episode}')
    bot.edit_message_text(f"üé¨ {anime['title']} - {episode_title}\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–∑–≤—É—á–∫—É:",
                         call.message.chat.id,
                         call.message.message_id,
                         reply_markup=dubs_keyboard(anime_id, episode, dubs))

@bot.callback_query_handler(func=lambda call: call.data.startswith('dub:'))
def select_quality_callback(call):
    _, anime_id, episode, dub_name = call.data.split(':')
    anime = anime_data.get(anime_id)
    
    if not anime:
        bot.answer_callback_query(call.id, "‚ùå –ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    episode_data = anime.get('episodes', {}).get(episode)
    if not episode_data:
        bot.answer_callback_query(call.id, "‚ùå –°–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    dub_data = episode_data.get('dubs', {}).get(dub_name, {})
    qualities = dub_data.get('quality', {})
    
    if not qualities:
        bot.answer_callback_query(call.id, "‚ùå –ö–∞—á–µ—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    dub_display = get_dub_display_name(dub_name)
    episode_title = episode_data.get('title', f'–°–µ—Ä–∏—è {episode}')
    
    bot.edit_message_text(f"üé¨ {anime['title']} - {episode_title}\n"
                         f"üéôÔ∏è –û–∑–≤—É—á–∫–∞: {dub_display}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ:",
                         call.message.chat.id,
                         call.message.message_id,
                         reply_markup=quality_keyboard(anime_id, episode, dub_name, qualities))

@bot.callback_query_handler(func=lambda call: call.data.startswith('quality:'))
def send_video_callback(call):
    _, anime_id, episode, dub_name, quality = call.data.split(':')
    anime = anime_data.get(anime_id)
    
    if not anime:
        bot.answer_callback_query(call.id, "‚ùå –ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    episode_data = anime.get('episodes', {}).get(episode)
    if not episode_data:
        bot.answer_callback_query(call.id, "‚ùå –°–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    video_url = episode_data.get('dubs', {}).get(dub_name, {}).get('quality', {}).get(quality)
    
    if not video_url:
        bot.send_message(call.message.chat.id, "‚ùå –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.")
        return
    
    dub_display = get_dub_display_name(dub_name)
    episode_title = episode_data.get('title', f'–°–µ—Ä–∏—è {episode}')
    
    try:
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ
        bot.send_video(call.message.chat.id,
                      video_url,
                      caption=f"üé¨ {anime['title']} - {episode_title}\n"
                             f"üéôÔ∏è –û–∑–≤—É—á–∫–∞: {dub_display}\n"
                             f"üìπ –ö–∞—á–µ—Å—Ç–≤–æ: {quality}",
                      supports_streaming=True)
        
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
        bot.send_message(call.message.chat.id,
                        f"üé¨ {anime['title']} - {episode_title}\n"
                        f"üéôÔ∏è –û–∑–≤—É—á–∫–∞: {dub_display}\n"
                        f"üìπ –ö–∞—á–µ—Å—Ç–≤–æ: {quality}\n\n"
                        f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ: {video_url}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('back_to_anime:'))
def back_to_anime_callback(call):
    anime_id = call.data.split(':')[1]
    anime = anime_data.get(anime_id)
    
    if anime:
        show_anime_info(call.message.chat.id, anime_id, anime)
        bot.delete_message(call.message.chat.id, call.message.message_id)
    else:
        bot.answer_callback_query(call.id, "‚ùå –ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")

@bot.callback_query_handler(func=lambda call: call.data.startswith('info:'))
def anime_info_callback(call):
    anime_id = call.data.split(':')[1]
    show_anime_info(call.message.chat.id, anime_id)

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
    print("üìù –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å YOUR_BOT_TOKEN_HERE –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω!")
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
        time.sleep(5)